=head1 NAME

perlfaq10 - Testing perl

=head1 DESCRIPTION

This section of the FAQ answers questions related to testing perl modules
and scripts.

=head2 How can I run module tests?

You can run any test file with

    $ perl -Ilib t/23.sometest.t

You will get detailed output of the single tests and any STDOUT and STDERR
output.

C<prove> is a more advanced tool which by default will give you a summary
in colored output, without STDOUT.

    $ prove t/23.sometest.t

To run all tests you usually do

    $ prove -lr t
    # -r recurse through t
    # -l: same as perl -I lib

See

    $ perldoc prove

for all the various options.



=head2 How can I mock a subroutine or a module?

With mocking you can test your code by replacing real functionality
(usually from other modules you use in your code) with simulated.

It's useful when the real code would require network
and you don't have it or don't want to use it; database connection,
hardware, ...

It's also useful for simulating errors or situations that you cannot
produce yourself - database connection timeout, changing the system time, ...

Replacing one subroutine with another can be done with L<Sub::Override>
for example;

    use Sub::Override;
    my $override = Sub::Override->new( "Other::Module::foo" => sub {
        my (@args) = @_;
        ...
    });
    ...
    $override->restore; # get back original functionality

For other tasks there already exist mocking modules, for example
L<Test::MockTime>, which replaces the time with simulated time.

=head2 How can I automate tests and process test results?

Sometimes there is the need to process tests yourself instead of just
getting the usual prove output.

In Continuous integration systems you might need to provide XML
output. There is L<TAP::Harness::JUnit> which you can use with Jenkins, for
example.

To produce your own output, you may use <TAP::Parser::Aggregator>.
